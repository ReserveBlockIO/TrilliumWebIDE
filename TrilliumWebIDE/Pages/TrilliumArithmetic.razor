@page "/trilliumarithmetic"

<div class="row-cols-md-8">
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Arithmetic in Trillium</h3>
        <div class="row">
                <p>
                   It includes basic arithmetic operations like addition, subtraction, multiplication, division.
                </p>
                <br />
                <p>
                    The Arithmetic Operators in Trillium are the following:
                </p>
                <ul>
                    <li>
                        + (Addition) – This operator is used to add two operands.
                    </li>
                    <li>
                        – (Subtraction) – Subtract two operands.
                    </li>
                    <li>
                        * (Multiplication) – Multiply two operands.
                    </li>
                    <li>
                        / (Division) – Divide two operands and gives the quotient as the answer.
                    </li>
                </ul>
        </div>
    </RadzenCard>
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">A Basic Calculator</h3>
        <div class="row">
            <br />
            <p>
                Below will show you a basic calculator to demonstrate Trillium's arithmetic.
            </p>
           
            <br />


            <div style="width:60%; margin-top: 10px; margin-bottom:10px;">
<textarea id="code" name="code" readonly="readonly" style="width:60%;">function calculator(firstNum : int, secondNum : int, operator : string) : string
{
    var result = 0
    if operator == "+"
    {
        result = firstNum + secondNum
        return string(result)
    }
    else if operator == "-"
    {
        result = firstNum - secondNum
        return string(result)
    }
    else if operator == "*"
    {
        result = firstNum * secondNum
        return string(result)
    }
    else if operator == "/"
    {
        result = firstNum / secondNum
        return string(result)
    }
    else 
    {
        return "No known operator was given"
    }
}</textarea>
            </div>
            <br />
            <br />
        </div>
    </RadzenCard>


</div>


@code {
    [Inject] private IJSRuntime _js { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await _js.InvokeVoidAsync("highlightSnippet");
        if(firstRender)
        {
            var output = await _js.InvokeAsync<string>("highlightSnippet");
            await InvokeAsync( StateHasChanged );
        }

    }
}
