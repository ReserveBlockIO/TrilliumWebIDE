@page "/trilliumbitwise"

<div class="row-cols-md-8">
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Bitwise Operators in Trillium</h3>
        <div class="row">
                <p>
                    Bitwise operators are based on the principle of performing operations bit by bit which is based on boolean algebra. 
                    It increases the processing speed and hence the efficiency of the program.
                </p>
                <br />
                <p>
                    The Bitwise Operators in Trillium are the following:
                </p>
                <ul style="margin-left:18px;">
                    <li>
                        & (Bitwise AND) – Converts the value of both the operands into binary form and performs AND operation bit by bit.
                    </li>
                    <li>
                        | (Bitwise OR) – Converts the value of both the operands into binary form and performs OR operation bit by bit.
                    </li>
                    <li>
                        ^ (Bitwise exclusive OR) – Converts the value of both the operands into binary form and performs EXCLUSIVE OR operation bit by bit.
                    </li>
                </ul>
        </div>
    </RadzenCard>
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Bitwise Operators Explained</h3>
        <div class="row">
            <br />
            <p>
                In order to better understand bitwise operators, lets refer to the truth table for various 
                bitwise operations and understand how it is associated with boolean algebra.
            </p>
           
            <br />
            <p>
                Lets take 2 variables, named, a and b.
            </p>
            <p>
                AND – Both the operands need to have boolean value 1 for the result to be 1.
            </p>
            <p>
                OR – At least one operand should have boolean value 1 for the result to be 1.
            </p>
            <p>
                XOR (EXCLUSIVE OR) – Either the first operand should have boolean value 1 or the second operand 
                should have boolean value 1. Both cannot have the boolean value 1 at the same time however.
            </p>
            <br />
            <RadzenImage Path="images/bitwiseex.png" Style="width: 60%;"></RadzenImage>
        </div>
    </RadzenCard>
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Some Basic Bitwise Statements</h3>

            <br />
            <p>
                Below you will see more examples of bitwise operators in use. .
            </p>
            <br />
            <div style="width:60%; margin-top: 10px; margin-bottom:10px;">
<textarea id="code" name="code" readonly="readonly" style="width:60%;">1 | 2 // returns 3
1 | 0 //returns 1
1 & 3 //returns 1
1 & 0 //returns 0
1 ^ 0 //returns 1
0 ^ 1 //returns 1
1 ^ 3 //returns 2
false | false //returns false
false | true //returns true
true | false //returns true
true | true //returns true
false & false //returns false
false & true //returns false
true & false //returns false
true & true //returns true
false ^ false //returns false
true ^ false //returns true
false ^ true //returns true
true ^ true //returns false</textarea>
            </div>
            <br />
            <br />

</RadzenCard>

</div>


@code {
    [Inject] private IJSRuntime _js { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await _js.InvokeVoidAsync("highlightSnippet");
        if(firstRender)
        {
            var output = await _js.InvokeAsync<string>("highlightSnippet");
            await InvokeAsync( StateHasChanged );
        }

    }
}
