@page "/trilliumstring"

<div class="row-cols-md-8">
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Strings in Trillium</h3>
        <div class="row">
                <p>
                    Strings are some of the most widely used variable types in almost all programming languages. 
                </p>
                <br />
                <p>
                    Below we will show you how strings are handled in Trillium and how you can define strings.
                </p>
        </div>
    </RadzenCard>
    <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Declaring Strings</h3>
        <div class="row">
            <br />
            <p>
                Below we show you to declare strings
            </p>
           
            <br />


            <div style="width:60%; margin-top: 10px; margin-bottom:10px;">
<textarea id="code" name="code" readonly="readonly" style="width:60%;">
var a = "string A"
var aDef : string = "defined string A"</textarea>
            </div>
            <br />
            <br />
            <p>
                Above you can see we first create a string variable by defining 'var a' and setting it equal to "string A". You can also define a string implicitly
                by using the ' : string ' nomenclature. 
            </p>
        </div>
    </RadzenCard>

        <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Using Strings</h3>
        <div class="row">
            <br />
            <p>
                Strings can be used to just define something and return that value, or they can have different operators applied to them. Below are some examples of that.

            </p>
           
            <br />

            <div style="width:60%; margin-top: 10px; margin-bottom:10px;">
<textarea id="code2" name="code" readonly="readonly" style="width:60%;">
var a = "string A"
var aDef : string = "string A"

a != aDef //returns false
a == aDef //returns true
a + aDef //returns string Astring A</textarea>
            </div>
            <br />
            <br />
            <p>
                We can see above some common uses for strings in Trillium. Of course this is a basic example and other use cases exist.
            </p>
        </div>
    </RadzenCard>

            <RadzenCard class="m-1" style="margin-bottom: 15px !important;">
        <h3 class="h3" style="color:darkturquoise;">Casting to a string</h3>
        <div class="row">
            <br />
            <p>
                Sometimes strings on their own can't do certain things like arithmetic and other boolean operators like greater than, so we have to handle those in another
                format and they cast them to a string. Below is an example of this.
            </p>
           
            <br />

            <div style="width:60%; margin-top: 10px; margin-bottom:10px;">
<textarea id="code3" name="code" readonly="readonly" style="width:60%;">
function turnNumberToString(number : int) : string
{
  var numString = string(number)
  return numString
}</textarea>
            </div>
            <br />
            <br />
            <p>
                If we pass the number <span style="color:gold;">1337</span> as an integer to our method above it will return a string value of <span style="color:darkturquoise;">'1337'</span>
            </p>
        </div>
    </RadzenCard>

</div>


@code {
    [Inject] private IJSRuntime _js { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await _js.InvokeVoidAsync("highlightSnippet");
        if(firstRender)
        {
            var output = await _js.InvokeAsync<string>("highlightSnippet");
            var output2 = await _js.InvokeAsync<string>("highlightSnippet2");
            var output3 = await _js.InvokeAsync<string>("highlightSnippet3");
            await InvokeAsync( StateHasChanged );
        }

    }
}
